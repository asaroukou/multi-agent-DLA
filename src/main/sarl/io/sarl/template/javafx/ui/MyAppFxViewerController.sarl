package io.sarl.template.javafx.ui;

import io.sarl.javafx.FxViewerController
import io.sarl.template.javafx.agents.MyAgent
import io.sarl.template.javafx.UI.*
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import javafx.fxml.FXML
import javafx.scene.layout.GridPane
import javafx.scene.shape.Rectangle
import javafx.scene.paint.Color
import javafx.scene.layout.Pane

import javafx.scene.layout.StackPane
import javafx.^event.EventHandler
import javafx.scene.input.MouseEvent
import java.util.ArrayList
import javafx.geometry.Point2D
import java.util.HashMap
import javafx.scene.layout.VBox
import javafx.scene.control.SplitPane
import javafx.scene.control.TextField
import javafx.scene.control.ColorPicker
import javafx.scene.control.TextFormatter
import javafx.util.converter.IntegerStringConverter
import javafx.scene.control.Button
import javafx.geometry.Insets
import javafx.scene.control.CheckBox

/** JavaFX controller for the JavaFX application.
 */
class Tile extends StackPane {

	val rec : Rectangle
	var activated : boolean
	
	new (width : int, stokeColor : Color, showStroke : boolean) {
		rec = new Rectangle()
		activated = false
		
		rec.width = width
		rec.height = width
		rec.fill = null
		if (showStroke) {
			this.rec.stroke = stokeColor
			this.rec.strokeWidth = 0.1	
		}
		this.children.add(rec)
	}
	
	def getY() {
		return this.rec.y
	}
	
	def getX : double {
		return rec.x
	}

	def setActivated(b : boolean) {
		this.activated = b
	}
	
	def setColor(color : Color) {
		this.rec.fill = color
	}

	def getRec() : Rectangle {
		return this.rec
	}

}

class PointWalker2D {
	var position: Point2D
	var state: boolean
	
	new(position : Point2D, state : boolean) {
		this.setPosition(position)
		this.setState(state)
	}

	def getPosition() : Point2D {
		return this.position
	}

	def getState() : boolean {
		return this.state
	}

	def setPosition(position : Point2D) {
		this.position = position
	}

	def setState(state : boolean) {
		this.state = state
	}
		
}

class MyAppFxViewerController extends FxViewerController {
	
	var TILE_AMOUNT : int
	val WIDTH = 830
	var TILE_WIDTH : int

	var gridStokeColor : Color
	var activeCellColor : Color
	var deadCellColor : Color
	var stuckCellColor : Color
	var showGrid: boolean
	
	var cells : HashMap<String, PointWalker2D> = new HashMap<String, PointWalker2D>()
	
	val launched = new AtomicBoolean(false)

	var launchedAgent : UUID

	@FXML
	public var mainPane : SplitPane
	
	@FXML
	public var grid : GridPane

	@FXML
	public var setupBox : VBox

	@FXML
	public var gridBox : VBox

	@FXML
	public var gridSizeText : TextField

	@FXML
	public var strokeColorWidget : ColorPicker

	@FXML
	public var stuckCellColorWidget : ColorPicker

	@FXML
	public var deadCellColorWidget : ColorPicker

	@FXML
	public var activeCellColorWidget : ColorPicker

	@FXML
	public var runBtn : Button
	
	@FXML
	public var showGridStroke: CheckBox
	

 
	def createGrid() {
		TILE_WIDTH = WIDTH / TILE_AMOUNT
		for (x : 0 ..< TILE_AMOUNT) {
	        for (y : 0 ..< TILE_AMOUNT) {
				var tile = new Tile(TILE_WIDTH, gridStokeColor, showGrid)
				grid.add(tile, x, y)	
	        }
	    }
	}
	
	def getGridNum(x : int, y : int) {
		return TILE_AMOUNT * x + y
	}
	
	def showCells() {
		for (x : 0 ..< TILE_AMOUNT) {
			for (y : 0 ..< TILE_AMOUNT) {
				var t = grid.getChildren().get(getGridNum(x, y)) as Tile
				t.activated = false
				t.color = deadCellColor
			}
	    }
		cells.forEach [ uuid, walkerPoint |
			var x = (walkerPoint.position.x as int) % TILE_AMOUNT
			var y = (walkerPoint.position.y as int) % TILE_AMOUNT
			if (x < 0) {
				x = TILE_AMOUNT - 1
			} else if (x >= TILE_AMOUNT) {
				x = 0
			}

			if (y < 0) {
				y = TILE_AMOUNT - 1
			} else if (y >= TILE_AMOUNT) {
				y = 0
			}
			try {
				var t = grid.getChildren().get(getGridNum(x, y)) as Tile
				t.activated = true
				if (walkerPoint.state === false) {
					t.color = activeCellColor
				} else {
					t.color = stuckCellColor
				}
			} catch (e:Exception){
			}
		]
	}
	
	def addCell(uuid : String, w : PointWalker2D) {
		this.cells.put(uuid, w)
	}

	/** UI initialization. The agent framework is started.
	 */
	 
	def computeInitConfiguration() {
		TILE_AMOUNT = gridSizeText.text as int
		gridStokeColor = strokeColorWidget.value
		stuckCellColor = stuckCellColorWidget.value
		deadCellColor = deadCellColorWidget.value
		activeCellColor = activeCellColorWidget.value
		showGrid = showGridStroke.isSelected
	}
	def requestRunSimulation() {
		computeInitConfiguration()
		createGrid()
		showCells()
		emitToAgents(new RunSimulation(TILE_AMOUNT))
	} 
	
	def initialize {
		setupBox.maxHeight = WIDTH
		setupBox.prefHeight = WIDTH
		setupBox.prefWidth = 300
		setupBox.maxWidth = 300
		setupBox.minWidth = 300

		gridBox.minHeight = WIDTH
		gridBox.minWidth = WIDTH

		grid.prefHeight = WIDTH
		grid.prefWidth = WIDTH

		grid.maxHeight = WIDTH
		grid.maxWidth = WIDTH

		gridBox.maxHeight = WIDTH
		gridBox.maxWidth = WIDTH

		applyIntegerFormatToField(gridSizeText)
		gridSizeText.text = "50"
		
		strokeColorWidget.value = Color.web("#C9C9C9")
		strokeColorWidget.customColors.add(Color.TRANSPARENT)
		
		stuckCellColorWidget.value = Color.RED
		stuckCellColorWidget.customColors.add(Color.TRANSPARENT)
		
		deadCellColorWidget.value = Color.WHITE
		deadCellColorWidget.customColors.add(Color.TRANSPARENT)
		
		activeCellColorWidget.value = Color.GREY
		activeCellColorWidget.customColors.add(Color.TRANSPARENT)
		

		runBtn.onMouseClicked = new EventHandler<MouseEvent>() {
			def handle(me : MouseEvent) {
				requestRunSimulation()
				runBtn.disable = true
			}
		}
		
		// Launching of the agent-side of the application
		if (!this.launched.getAndSet(true)) {
			// First launch => start the agent framework with an agent of type MyAgent and the computed id.
			val id = UUID::randomUUID
			startAgentApplication(typeof(MyAgent), id) [
				
			]
		}
	}

	protected def refreshScreen {
		showCells()
	}

	protected def onReady{
		runBtn.disable = false
//		requestRunSimulation()
	}

	/** React to any request from the agent refresh the UI.
	 */
	dispatch def receiveEvent(^event : Refresh) {
		refreshScreen
	}

	dispatch def receiveEvent(^event : Ready) {
		onReady
	}
	
	def applyIntegerFormatToField(field : TextField) : void {
    	field.setTextFormatter(new TextFormatter<Integer>((new IntegerStringConverter())));
	}

}
