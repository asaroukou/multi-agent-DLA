package io.sarl.template.javafx.ui;

import io.sarl.javafx.FxViewerController
import io.sarl.template.javafx.agents.MyAgent
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import javafx.fxml.FXML
import javafx.scene.layout.GridPane
import javafx.scene.shape.Rectangle
import javafx.scene.paint.Color
import javafx.scene.layout.Pane

import javafx.scene.layout.StackPane
import javafx.^event.EventHandler
import javafx.scene.input.MouseEvent
import java.util.ArrayList
import javafx.geometry.Point2D
import java.util.HashMap

/** JavaFX controller for the JavaFX application.
 */
class Tile extends StackPane {

	val rec : Rectangle
	var activated : boolean
	
	new (width : int) {
		rec = new Rectangle()
		activated = false
		
		rec.width = width
		rec.height = width
		rec.fill = null
		this.rec.stroke = Color.BLACK
		this.rec.strokeWidth = 0.1
		this.children.add(rec)
	}
	
	def getY() {
		return this.rec.y
	}
	
	def getX : double {
		return rec.x
	}

	def setActivated(b : boolean) {
		this.activated = b
		activated ? this.rec.fill = Color.BLACK : this.rec.fill = Color.WHITE
	}

	def getRec() : Rectangle {
		return this.rec
	}

}

class MyAppFxViewerController extends FxViewerController {
	
	val TILE_AMOUNT = 75
	val WIDTH = 750
	val TILE_WIDTH = WIDTH / TILE_AMOUNT

	var cells : HashMap<String, Point2D> = new HashMap<String, Point2D>()
	
	val launched = new AtomicBoolean(false)

	var launchedAgent : UUID
	
	@FXML
	public var Grid : GridPane

	@FXML
	public var mainPane : Pane

 
	def createGrid() {
		for (x : 0 ..< TILE_AMOUNT) {
	        for (y : 0 ..< TILE_AMOUNT) {
				var tile = new Tile(TILE_WIDTH)
				Grid.add(tile, x, y)	
	        }
	    }
	}
	
	//we can not change a tile of the GridPane by using x, y
	//we have to get the tile number first
	def getGridNum(x : int, y : int) {
		return TILE_AMOUNT * x + y
	}
	
	def showCells() {
		for (x : 0 ..< TILE_AMOUNT) {
			for (y : 0 ..< TILE_AMOUNT) {
				var t = Grid.getChildren().get(getGridNum(x, y)) as Tile
				t.activated = false
			}
	    }
		cells.forEach [ uuid, position |
			var x = (position.x as int) % TILE_AMOUNT
			var y = (position.y as int) % TILE_AMOUNT
			if (x < 0) {
				x = TILE_AMOUNT - 1
			} else if (x >= TILE_AMOUNT) {
				x = 0
			}

			if (y < 0) {
				y = TILE_AMOUNT - 1
			} else if (y >= TILE_AMOUNT) {
				y = 0
			}
			try {
				var t = Grid.getChildren().get(getGridNum(x, y)) as Tile
				t.activated = true
			} catch (e:Exception){
				println("#######error########")
				println(x+", "+y)
				println(Grid.getChildren().length)
				println(getGridNum(x, y))
			}
		]
		println("hash size:" + cells.size())
	}
	
	def addCell(uuid: String, p : Point2D){
		this.cells.put(uuid, p)
	}

	/** UI initialization. The agent framework is started.
	 */
	def initialize {
		println("initialize controller")
		
		mainPane.prefHeight = WIDTH + TILE_AMOUNT
		mainPane.prefWidth = WIDTH + TILE_AMOUNT
		
		createGrid()
		showCells()

		mainPane.setOnMouseClicked(new EventHandler<MouseEvent>() {
			@Override
			def handle(me : MouseEvent) : void {
				var posX : double = me.getX()
				var posY : double = me.getY()

				var colX : int = (posX / TILE_WIDTH) as int
				var colY : int = (posY / TILE_WIDTH) as int

				var tile = Grid.getChildren().get(getGridNum(colX, colY)) as Tile

				if (tile.getRec().fill == Color.BLACK) {
					tile.getRec().fill = null
				} else {
					tile.getRec().fill = Color.BLACK
				}

			}
		})
		
		// Launching of the agent-side of the application
		if (!this.launched.getAndSet(true)) {
			// First launch => start the agent framework with an agent of type MyAgent and the computed id.
			val id = UUID::randomUUID
			startAgentApplication(typeof(MyAgent), id) [
				// TODO: Put any action that must be done after the first agent launching
				
			]
		}
		

	}

	protected def refreshScreen {
		showCells()
		// TODO: Refresh the JavaFX screen
	}

	/** React to any request from the agent refresh the UI.
	 */
	dispatch def receiveEvent(^event : Refresh) {
		refreshScreen
	}

}
